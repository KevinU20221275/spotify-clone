---
// import data
import { playlists, myPlaylists } from '@/data/playlist';
import { albums } from '@/data/albums';

// import components
import Layout from '../layouts/Layout.astro';
import PlayListItemCard from '@/components/playlist/PlayListItemCard.astro';
import PlaylistCard from '@/components/playlist/PlaylistCard.astro';
import Greeting from "@/components/Greeting.svelte";
import PreFooter from '@/components/common/PreFooter.astro';

const myPlaylistId= myPlaylists.map((p) => p.id)
const filteredPlaylist = playlists.filter((playlist) => !myPlaylistId.includes(playlist.id))
const filteredAlbums = albums.filter((album) => !myPlaylistId.includes(album.id))
---

<Layout title="Spotify Clone">
	<div
		id="playlist-container" 
		class="relative transition-all bg-zinc-800">
		
		<div class="flex flex-col gap-8 relative z-1 px-6 pt-10">
			<div class="grid grid-cols-2 lg:grid-cols-3 gap-2 mb-4">
				{
					myPlaylists.map((playlist) => <PlaylistCard playlist={playlist}/>)
				}
			</div>
			<Greeting />
			<section>
                <h4 class="text-2xl font-extrabold text-white">Hecho para ti</h4>
				<article class="flex flex-wrap mt-6 gap-4">
					{
						filteredPlaylist.map((playlist) => <PlayListItemCard playlist={playlist}/>)
					}
				</article>
			</section>
			<section>
                <h4 class="text-2xl font-extrabold text-white">Álbumes</h4>
                <article class="flex flex-wrap mt-6 gap-4">
                    {filteredAlbums.map((album) => <PlayListItemCard playlist={album}/>)}
                </article>
            </section>
			<PreFooter/>
		</div>
		<div class="shape absolute inset-0 bg-gradient-to-t from-zinc-900 via-zinc-900 to-zinc-900/5">

		</div>
	</div>
</Layout>

<script>
	const addBg = () => {
		const playlistItems = document.querySelectorAll('.playlist-item');
		const playlistContainer = document.getElementById('playlist-container');
		let isHovering = false

		if (!playlistContainer) return

		playlistContainer.style.transition = "background 0.5s ease";

		playlistItems.forEach((item) => {
			item.addEventListener('mouseover', (e) => {
				const target = (e.target as Element).closest('.playlist-item');
				if (target) {
					const color = target.getAttribute('color');
					playlistContainer?.classList.remove('bg-zinc-800');
					playlistContainer.style.background = `linear-gradient(180deg, ${color} 0%, ${color} 4%, #000 30%, #000 100%)`;

					isHovering = true;
				}
			});

			item.addEventListener('mouseleave', () => {
				// Cuando el mouse sale de un item, se mantiene el hover activado hasta que todos los items tengan el mouse fuera
				isHovering = false;
				
				// Verifica si el mouse ya ha salido de todos los items
				setTimeout(() => {
					if (!isHovering) {
					playlistContainer.style.background = ""; 
					playlistContainer?.classList.add('bg-zinc-800');
					}
				}, 150); // Un pequeño retraso para asegurarse de que el mouse realmente ha salido
			});
		});
	};

	// Ejecutar en la carga de la página
	document.addEventListener('DOMContentLoaded', addBg);
	
	// Ejecutar cuando Astro realiza un "swap" de la página
	document.addEventListener('astro:after-swap', addBg);
</script>
